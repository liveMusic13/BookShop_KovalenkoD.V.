/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/css/style.css":(e,t,s)=>{s.r(t)},"./src/js/slider.js":(e,t,s)=>{function o(){const e=[{image:"slider_image/people.jpg"},{image:"slider_image/maunt.jpg"},{image:"slider_image/foliage.jpg"}],t=document.querySelector(".start__block-image"),s=document.querySelector(".start__block-dots");function o(e){t.querySelector(".active").classList.remove("active"),t.querySelector(".n"+e).classList.add("active"),s.querySelector(".active").classList.remove("active"),s.querySelector(".n"+e).classList.add("active")}e.forEach(((s,o)=>{let r=`<img class="start__image n${o} ${0===o?"active":""}" src="${e[o].image}" alt="image" data-index="${o}">`;t.innerHTML+=r})),e.forEach(((e,t)=>{let o=`<div class="start__dot n${t} ${0===t?"active":""}" data-index="${t}"></div>`;s.innerHTML+=o})),s.querySelectorAll(".start__dot").forEach((e=>{e.addEventListener("click",(function(){o(this.dataset.index)}))})),setInterval((()=>{let s=+t.querySelector(".active").dataset.index;o(s===e.length-1?0:s+1)}),3e3)}s.r(t),s.d(t,{slider:()=>o})}},t={};function s(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,s),a.exports}s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{s.r(o);s("./src/css/style.css");(0,s("./src/js/slider.js").slider)();document.querySelector(".menu");const e=document.querySelector(".menu-book"),t=document.querySelector(".result__button-load-more"),r=document.querySelector(".result__block-book-result");let a=0,l="";function n(t=e.querySelector(".active").dataset.index){a+=6,fetch(`https://www.googleapis.com/books/v1/volumes?q="${t}"&key=AIzaSyDAqSWPYcnIMTbPuqFbna6mdM04-wNA5Qo&printType=books&startIndex=0&maxResults=${a}&langRestrict=en`).then((e=>e.json())).then((e=>{e.items.forEach(((t,s)=>{var o;o=function(e,t){return`<div class="result__book book-result">\n  <img class="book-result__image" src="${e.items[t].volumeInfo.imageLinks.thumbnail}" alt="book-image">\n  <div class="book-result__content">\n    <p class="book-result__author">\n      ${e.items[t].volumeInfo.authors}\n    </p>\n    <h2 class="book-result__title">\n      ${e.items[t].volumeInfo.title.substr(0,37)+"..."}\n    </h2>\n    <div class="book-result__block-rating">\n      <div class="book-result__average-rating">\n        <img src="icons/GoldStar.svg" alt="star" class="book-result__star-image">\n        <img src="icons/GoldStar.svg" alt="star" class="book-result__star-image">\n        <img src="icons/GoldStar.svg" alt="star" class="book-result__star-image">\n        <img src="icons/GoldStar.svg" alt="star" class="book-result__star-image">\n        <img src="icons/Star.svg" alt="star" class="book-result__star-image">\n      </div>\n      <div class="book-result__rating-count">${e.items[t].volumeInfo.maturityRating}</div>\n    </div>\n    <p class="book-result__description">\n      ${e.items[t].searchInfo.textSnippet.substr(0,92)+"..."}\n    </p>\n    <p class="book-result__price">\n    ${e.items[t].saleInfo.retailPrice}\n    </p>\n    <button class="book-result__buy" type="submit">buy now</button>\n  </div>\n</div>`}(e,s),r.innerHTML+=o;let a=0;const l=document.querySelectorAll(".book-result__buy"),n=document.querySelector(".menu__count-shop");l.forEach(((t,o)=>{t.addEventListener("click",(()=>{const t=`book ${e.items[o].volumeInfo.title}`,r=JSON.parse(localStorage.getItem(t));if(console.log("here",r,t),r)localStorage.setItem(t,null),a-=1,a<=0?n.style.display="none":n.textContent=a;else{n.style.display="block",n.textContent=++a;let o={author:e.items[s].volumeInfo.authors,title:e.items[s].volumeInfo.title,rating:e.items[s].volumeInfo.maturityRating,description:e.items[s].searchInfo.textSnippet,price:e.items[s].saleInfo.retailPrice};localStorage.setItem(t,JSON.stringify(o))}}))}))}))})).catch((e=>console.error(e)))}e.querySelectorAll(".menu-book__item").forEach((t=>{t.addEventListener("click",(()=>{e.querySelector(".active").classList.remove("active"),t.classList.add("active"),l=t.dataset.index,r.innerHTML="",r.innerHTML='<button class="result__button-load-more" type="submit">load more</button>',a=0,n()}))})),t.addEventListener("click",n)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,