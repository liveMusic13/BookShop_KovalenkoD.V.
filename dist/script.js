/*! For license information please see script.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/css/style.css":(e,t,s)=>{s.r(t)},"./src/js/slider.js":(e,t,s)=>{function r(){const e=[{image:"slider_image/people.jpg"},{image:"slider_image/maunt.jpg"},{image:"slider_image/foliage.jpg"}],t=document.querySelector(".start__block-image"),s=document.querySelector(".start__block-dots");function r(e){t.querySelector(".active").classList.remove("active"),t.querySelector(".n"+e).classList.add("active"),s.querySelector(".active").classList.remove("active"),s.querySelector(".n"+e).classList.add("active")}e.forEach(((s,r)=>{let o=`<img class="start__image n${r} ${0===r?"active":""}" src="${e[r].image}" alt="image" data-index="${r}">`;t.innerHTML+=o})),e.forEach(((e,t)=>{let r=`<div class="start__dot n${t} ${0===t?"active":""}" data-index="${t}"></div>`;s.innerHTML+=r})),s.querySelectorAll(".start__dot").forEach((e=>{e.addEventListener("click",(function(){r(this.dataset.index)}))})),setInterval((()=>{let s=+t.querySelector(".active").dataset.index;r(s===e.length-1?0:s+1)}),3e3)}s.r(t),s.d(t,{slider:()=>r})}},t={};function s(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,s),a.exports}s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{s.r(r);s("./src/css/style.css");(0,s("./src/js/slider.js").slider)();document.querySelector(".menu");const e=document.querySelector(".menu-book"),t=document.querySelector(".result__button-load-more"),o=document.querySelector(".result__block-book-result");let a=0,i="";function n(t=e.querySelector(".active").dataset.index){a+=6,fetch(`https://www.googleapis.com/books/v1/volumes?q="${t}"&key=AIzaSyDAqSWPYcnIMTbPuqFbna6mdM04-wNA5Qo&printType=books&startIndex=0&maxResults=${a}&langRestrict=en`).then((e=>e.json())).then((e=>{e.items.forEach(((t,s)=>{var r;r=function(e,t){return`<div class="result__book book-result">\n  <img class="book-result__image" src="${e.items[t].volumeInfo.imageLinks.thumbnail}" alt="book-image">\n  <div class="book-result__content">\n    <p class="book-result__author">\n      ${e.items[t].volumeInfo.authors}\n    </p>\n    <h2 class="book-result__title">\n      ${e.items[t].volumeInfo.title}\n    </h2>\n    <div class="book-result__block-rating">\n      <div class="book-result__average-rating">\n        <img src="icons/GoldStar.svg" alt="star" class="book-result__star-image">\n        <img src="icons/GoldStar.svg" alt="star" class="book-result__star-image">\n        <img src="icons/GoldStar.svg" alt="star" class="book-result__star-image">\n        <img src="icons/GoldStar.svg" alt="star" class="book-result__star-image">\n        <img src="icons/Star.svg" alt="star" class="book-result__star-image">\n      </div>\n      <div class="book-result__rating-count">${e.items[t].volumeInfo.maturityRating}</div>\n    </div>\n    <p class="book-result__description">\n      ${e.items[t].searchInfo.textSnippet}\n    </p>\n    <p class="book-result__price">\n    ${e.items[t].saleInfo.retailPrice}\n    </p>\n  </div>\n</div>`}(e,s),o.innerHTML+=r}))})).catch((e=>console.error(e)))}e.querySelectorAll(".menu-book__item").forEach((t=>{t.addEventListener("click",(()=>{e.querySelector(".active").classList.remove("active"),t.classList.add("active"),i=t.dataset.index,o.innerHTML="",o.innerHTML='<button class="result__button-load-more" type="submit">load more</button>',a=0,n()}))})),t.addEventListener("click",n)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,